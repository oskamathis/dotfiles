# g をファイル先頭に移動に変更、 view-grep を再割当て
bind generic g      move-first-line
bind generic E      view-grep

# G でファイル末尾に移動 (default: :toggle commit-title-graph)
bind generic G      move-last-line
bind main    G      move-last-line

# Alt-g で :toggle commit-title-graph
bind main    <Esc>g :toggle commit-title-graph

# n / p で単位ごとの移動
bind diff    n      :/^@@
bind diff    p      :?^@@
bind diff    <Esc>n :/^diff --(git|cc)
bind diff    <Esc>p :?^diff --(git|cc)
bind stage   n      :/^@@
bind stage   p      :?^@@
bind stage   <Esc>n :/^diff --(git|cc)
bind stage   <Esc>p :?^diff --(git|cc)
bind pager   n      :/^@@
bind pager   p      :?^@@
bind pager   <Esc>n :/^diff --(git|cc)
bind pager   <Esc>p :?^diff --(git|cc)
bind log     n      :/^commit
bind log     p      :?^commit

# F で fetch (default: :toggle file-name / :toggle commit-title-refs)
bind generic F      ?git fetch %(remote)
bind main    F      ?git fetch %(remote)

# Alt-f で :toggle file-name / :toggle commit-title-refs
bind generic <Esc>f :toggle file-name
bind main    <Esc>f :toggle commit-title-refs

# U で pull
bind generic U      ?git pull %(remote)

# Alt-u で該当ブランチを更新
bind main    <Esc>u ?sh -c "git checkout %(branch) && git pull %(remote) --ff-only && git checkout -"
bind diff    <Esc>u ?sh -c "git checkout %(branch) && git pull %(remote) --ff-only && git checkout -"
bind refs    <Esc>u ?sh -c "git checkout %(branch) && git pull %(remote) --ff-only && git checkout -"

# P で remote への push
bind generic P      ?git push -u %(remote) %(repo:head)

# C で commit (refs での C は checkout, main での C は cherry-pick だが上書きする)
bind generic C      !git commit
bind refs    C      !git commit
bind main    C      !git commit

# Alt-c で commit --allow-empty
bind generic <Esc>c !git commit --allow-empty

# + で commit --amend
bind generic +      !git commit --amend --allow-empty

# L で reflog
bind generic L      !sh -c "git reflog --pretty=raw | tig --pretty=raw"

# _ で指定 reflog 番号にリセット
bind generic _      ?git reset --hard HEAD@{"%(prompt Enter HEAD@{} number: )"}

# ! で revert
bind main    !      ?git revert %(commit)

# K で cherry-pick (default: 'C')
bind main    K      ?git cherry-pick %(commit)
bind diff    K      ?git cherry-pick %(commit)

# Alt-k で cherry-pick -n (--no-commit)
bind main    <Esc>k ?git cherry-pick -n %(commit)
bind diff    <Esc>k ?git cherry-pick -n %(commit)

## 以下、Shift付きでブランチ指定、Alt付きでコミットID指定のコマンド

# = で checkout
bind main    =      ?git checkout %(branch)
bind refs    =      ?git checkout %(branch)
bind main    <Esc>= ?git checkout %(commit)

# - で直前のブランチに戻る (checkout -)
bind generic -      ?git checkout -

# T で tag
bind main    T ?git tag "%(prompt Enter tag name: )" %(commit)
bind refs    T ?git tag "%(prompt Enter tag name: )" %(branch)

# B でブランチを作成してそのブランチに移動 (checkout -b)
bind main    B      ?git checkout -b "%(prompt Enter branch name: )" %(branch)
bind refs    B      ?git checkout -b "%(prompt Enter branch name: )" %(branch)
bind main    <Esc>b ?git checkout -b "%(prompt Enter branch name: )" %(commit)

# M で merge
bind main    M      ?git merge %(branch)
bind diff    M      ?git merge %(branch)
bind refs    M      ?git merge %(branch)
bind main    <Esc>m ?git merge %(commit)
bind diff    <Esc>m ?git merge %(commit)

# R で rebase
bind main    R      ?git rebase %(branch)
bind diff    R      ?git rebase %(branch)
bind refs    R      ?git rebase %(branch)
bind main    <Esc>r ?git rebase %(commit)
bind diff    <Esc>r ?git rebase %(commit)

# I で rebase -i
bind main    I      ?git rebase -i %(branch)
bind diff    I      ?git rebase -i %(branch)
bind refs    I      ?git rebase -i %(branch)
bind main    <Esc>i ?git rebase -i %(commit)
bind diff    <Esc>i ?git rebase -i %(commit)

# main view の左端にコミットIDを表示する
set main-view = id date author:email-user commit-title:graph=yes,refs=yes

# blame view の行数表示をON、intervalを1に
set blame-view  = date:default author:email-user id:yes,color line-number:yes,interval=1 text

# Pager 系の行数表示をON、intervalを1に (default: line-number:no,interval=5)
set pager-view  = line-number:yes,interval=1 text
set stage-view  = line-number:yes,interval=1 text
set log-view    = line-number:yes,interval=1 text
set blob-view   = line-number:yes,interval=1 text
set diff-view   = line-number:yes,interval=1 text:yes,commit-title-overflow=no

# utf-8 文字で画面描画する (~でトグル)
set line-graphics = utf-8

# 検索時に大文字小文字を無視する (default: false)
set ignore-case = true

# マージ diff を表示する
set diff-options = -m --first-parent

# マウスを有効にする
set mouse = true

# 更新設定
set refresh-mode = periodic
set refresh-interval = 1

# 差分表示に diff-highlight を使う (diff-highlight が $PATH にあること)
set diff-highlight = true

# カラー設定
# diff-view で境界が見やすくなるように変更
color  diff-header       default red
color  diff-chunk        black   white

